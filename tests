#!/usr/bin/env bash

source ./just-colors &> /dev/null

TOTAL_TESTS=0
PASSED_TESTS=0

PATH_TEMPLATES_FOR_TEST=$PATH_PREFIX/templates_for_test

assert() {
  TOTAL_TESTS=`expr $TOTAL_TESTS + 1`
  case $# in
    2)
      result_of_command=$($1)
      if [[ $result_of_command == $2 ]]; then 
        print_log ok
        PASSED_TESTS=`expr $PASSED_TESTS + 1`
      else
        echo $result_of_command
        print_log error "\$($1) and $2 is not equal"
      fi;;
  esac
}

clean_up() {
  local files_for_del=$(ls $PATH_TEMPLATES_FOR_TEST/*.cache)
  [[ "$files_for_del" ]] && rm $files_for_del
}

base00="181818"
base01="282828"
base02="383838"
base03="585858"
base04="b8b8b8"
base05="d8d8d8"
base06="e8e8e8"
base07="f8f8f8"
base08="ab4642"
base09="dc9656"
base0A="f7ca88"
base0B="a1b56c"
base0C="86c1b9"
base0D="7cafc2"
base0E="ba8baf"
base0F="a16946"

#
# tests for parse_theme and get_value
#
parse_theme $THEMES_PATH/default-dark.$THEME_EXT

assert "get_value base00" $base00
assert "get_value base01" $base01
assert "get_value base02" $base02
assert "get_value base03" $base03
assert "get_value base04" $base04
assert "get_value base05" $base05
assert "get_value base06" $base06
assert "get_value base07" $base07
assert "get_value base08" $base08
assert "get_value base09" $base09
assert "get_value base0A" $base0A
assert "get_value base0B" $base0B
assert "get_value base0C" $base0C
assert "get_value base0D" $base0D
assert "get_value base0E" $base0E
assert "get_value base0F" $base0F

#
# tests for build_template
#

for template in $(ls $PATH_TEMPLATES_FOR_TEST/*.template); do
  solution=${template%.template}.solution
  cache=${template%.template}.cache
  build_template $template $cache
  assert "diff $solution $cache" ""
done

clean_up

echo Total tests: $TOTAL_TESTS
echo Passed tests: $PASSED_TESTS
