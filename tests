#!/usr/bin/env bash

source ./just-colors > /dev/null

TOTAL_TESTS=0
PASSED_TESTS=0
PATH_TEMPLATES_FOR_TEST=$PATH_PREFIX/templates_for_test

assert() {
  TOTAL_TESTS=`expr $TOTAL_TESTS + 1`
  case $# in
    2)
      if [[ $1 == $2 ]]; then 
        print_log ok
        PASSED_TESTS=`expr $PASSED_TESTS + 1`
      else
        print_log error "$1 and $2 is not equal"
      fi;;
  esac
}

clean_up() {
  local files_for_del=$(ls $PATH_TEMPLATES_FOR_TEST/*.cache)
  [[ "$files_for_del" ]] && rm $files_for_del
}

base00="181818"
base01="282828"
base02="383838"
base03="585858"
base04="b8b8b8"
base05="d8d8d8"
base06="e8e8e8"
base07="f8f8f8"
base08="ab4642"
base09="dc9656"
base0A="f7ca88"
base0B="a1b56c"
base0C="86c1b9"
base0D="7cafc2"
base0E="ba8baf"
base0F="a16946"

test_parse_theme_get_value() {
  parse_theme $THEMES_PATH/default-dark.$THEME_EXT
  for number in $(echo {1..9} {A..F}); do
    name_of_var="base0${number}"
    get_value ${name_of_var}
    assert $RETURN_GET_VALUE ${!name_of_var}
  done
}

test_build_template() {
  for template in $(ls $PATH_TEMPLATES_FOR_TEST/*.template); do
    solution=${template%.template}.solution
    cache=${template%.template}.cache
    build_template $template $cache
    assert "$(diff $solution $cache)" ""
  done
}

test_all() {
  echo "test parse_theme and get_value"
  test_parse_theme_get_value
  echo "test build_template"
  test_build_template
}

test_all

clean_up

echo Total tests: $TOTAL_TESTS
echo Passed tests: $PASSED_TESTS
