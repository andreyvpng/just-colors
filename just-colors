#!/usr/bin/env bash

#set -o nounset
#set -o errexit

readonly PATH_PREFIX=$HOME/.config/just-colors
readonly CACHE_PATH=$PATH_PREFIX/cache
readonly TEMPLATE_PATH=$PATH_PREFIX/templates
readonly THEMES_PATH=$PATH_PREFIX/themes
readonly THEME_EXT=yaml
readonly VAR_PREFIX=TEMPLATE_VAR_
readonly OK=0
readonly FAIL=1

readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly CYAN='\033[0;36m'
readonly NORMAL='\033[0m'

THEME_PATH=
DEBUG=$FAIL

usage() {
  cat <<EOF
usage: just-colors [options]

  Options:
    --help
    --theme [name of theme]
    --no-apply
    --reload
    --after [path to script to run after]
EOF
}

print_log() {
  # Print colorize log
  #
  # $1          status
  #             ok|error|warning
  # $2          message
  #
  local status=$1
  local message=$2

  case $status in
    ok) echo -e "[${GREEN}OK${NORMAL}] $message";;
    error) echo -e "[${RED}ERROR${NORMAL}] $message";;
    warning) echo -e "[${YELLOW}WARNING${NORMAL}] $message";;
    debug) echo -e "[${CYAN}DEBUG${NORMAL}] $message";;
  esac
}

_die() {
  print_log error "$1"
  exit $FAIL
}

parse_theme() {
  # Parse the theme file
  #
  # $1            theme file
  #
  # The function searches for all matches by regular
  # expression that matches:
  # [start_of_line][some word containing a-zA-Z0-9]: [some word containing a-zA-Z0-9#][end of line]
  # alias,
  # [variable]: [value]
  #
  # Next, the values are assigned to the bash variables using eval
  # Security using eval is ensured by the following:
  #   1. data from the theme file is checked using regular expressions
  #      and cannot run extraneous code
  #   2. assigned variables using eval do not overlap with other
  #      script variables due to prefix($VAR_PREFIX)
  #
  local theme=$1
  local fields=$( \
    egrep -o "^([0-9a-zA-Z])\w+: \"([0-9a-zA-Z#])\w+\"$" $theme)

  local field_for_initialize=""
  for field in $fields; do
    if [[ $field_for_initialize == "" ]]; then
      field_for_initialize=$( \
        echo $field \
        | sed 's/://g')
      continue
    fi

    local value=$field
    eval ${VAR_PREFIX}${field_for_initialize}=${value}
    field_for_initialize=""
  done

  if [[ $DEBUG == $OK ]]; then
    print_log debug "Theme is parsed.\n\t$theme"
  fi
}

RETURN_GET_VALUE=

get_value() {
  # Get the field value from the theme file
  #
  # $1        name_of_field
  #
  local name_of_variable=${VAR_PREFIX}${1}
  RETURN_GET_VALUE=${!name_of_variable}
}

RETURN_PARSE_TEMPLATE=

parse_template() {
  # Get all matches from the
  # template file in the pattern.
  #
  # $1        template file
  #
  local template=$1
  if [[ ! -f $1 ]]; then
    print_log error "Template $1 is not exist"
    return 1
  fi
  local matches=$( \
    egrep -o "\{\{([0-9a-zA-Z-]){1,}\}\}" $template)
  RETURN_PARSE_TEMPLATE=$( \
    echo $matches \
    | sed 's/[\{\}]//g')

  if [[ $DEBUG == $OK ]]; then
    print_log debug "Template is parsed.\n\t$template"
  fi
}

insert_into_template() {
  # Insert into template
  # In short, makes replacing the pattern with another string
  #
  # $1        pattern
  # $2        replacement string
  # $3        file path
  #
  local pattern=$1
  local replacement_string=$2
  local file_path=$3
  sed -i -e "s/{$pattern}/$replacement_string/g" $file_path
}

is_color() {
  # Is this color value?
  #
  # $1        variable
  #
  local variable=$1
  local variable_after_regex=$( \
    echo $variable \
    | egrep -o "([0-9A-Fa-f]{6})")

  if [[ $variable == $variable_after_regex ]]; then
    return $OK
  else
    return $FAIL
  fi
}

RETURN_GET_COLOR_BYTE=

get_color_byte() {
  # $1            color
  # $2            color type
  #               r|g|b
  #
  local color=$1
  local color_type=${2:-}

  case $color_type in
    r) RETURN_GET_COLOR_BYTE=${color:0:2};;
    g) RETURN_GET_COLOR_BYTE=${color:2:2};;
    b) RETURN_GET_COLOR_BYTE=${color:4:2};;
    *) RETURN_GET_COLOR_BYTE=${color};;
  esac
}

RETURN_CONVERT_16_TO_10_BASE=

convert_16_to_10_base() {
  # $1          number in 16 base
  #
  local number=$1
  RETURN_CONVERT_16_TO_10_BASE=$(( 16#${number} ))
}

RETURN_FLOATING_POINT_DIVISION=

floating_point_division() {
  RETURN_FLOATING_POINT_DIVISION=0$(bc -l <<< "$1 / $2")
}

RETURN_GET_COLOR_VALUE=

get_color_value() {
  # Echo value of color
  #
  # $1            color name
  # optional:
  # $2            defines the format
  #
  local color=$1
  local postfix=$2

  local format=$( \
    echo $postfix \
    | egrep -o '(hex|rgb|dec)')

  local mod=$( \
    echo $postfix \
    | egrep -o '\-[A-Za-z]{1,}$' \
    | sed 's/-//g')

  case $format in
    hex)
      case $mod in
        bgr)
          RETURN_GET_COLOR_VALUE=""
          for $byte in {b,g,r}; do
            get_color_byte $color $byte
            RETURN_GET_COLOR_VALUE+="${RETURN_GET_COLOR_BYTE}"
          done
          ;;
        "r"|"b"|"g"|"")
          get_color_byte $color $mod
          RETURN_GET_COLOR_VALUE="$RETURN_GET_COLOR_BYTE"
          ;;
      esac
      ;;
    rgb)
      case $mod in
        "r"|"b"|"g")
          get_color_byte $color $mod
          convert_16_to_10_base $RETURN_GET_COLOR_BYTE
          RETURN_GET_COLOR_VALUE=$RETURN_CONVERT_16_TO_10_BASE
          ;;
      esac
      ;;
    dec)
      case $mod in
        "r"|"b"|"g")
          get_color_byte $color $mod
          convert_16_to_10_base $RETURN_GET_COLOR_BYTE
          floating_point_division $RETURN_GET_COLOR_BYTE 255
          RETURN_GET_COLOR_VALUE=$RETURN_FLOATING_POINT_DIVISION
        ;;
      esac
      ;;
  esac
}

build_template() {
  #
  # $1        path to template
  #
  template=$1
  cache=$2

  cp "$template" $cache

  parse_template $template
  for match in $RETURN_PARSE_TEMPLATE; do
    match_field=$(echo $match | egrep -o '^[^\-]*')
    match_mod=$(echo $match | sed s/$match_field-//g)

    get_value $match_field
    value=$RETURN_GET_VALUE

    is_color $value &&
      [[ $match_mod != "" ]] &&
        get_color_value $value $match_mod &&
          value=$RETURN_GET_COLOR_VALUE

    insert_into_template \
      "{$match}" \
      "$value" \
      "$cache"
  done
}

build_all_templates() {
  if [[ $DEBUG == $OK ]]; then
    print_log debug "Building is started"
  fi

  for template in $TEMPLATE_PATH/*; do
    build_template $template "$CACHE_PATH/$(basename $template)"
  done
}

does_the_theme_exist() {
  THEME_PATH="${THEMES_PATH}/${THEME}.${THEME_EXT}"
  if [[ -s $THEME_PATH ]]; then
    return $OK
  else
    return $FAIL
  fi
}

apply_theme() {
  xrdb -merge -quiet $CACHE_PATH/colors.Xresources
  $CACHE_PATH/tty.sh
  print_log ok "The theme applied"
}

print_colorscheme() {
  for i in {40..47}; do
    color="\033[${i}m"
    echo -en "$color  "
  done
}

parse_arguments() {
  [[ $# == 0 ]] && HELP=$OK

  while (( "$#" )); do
    case "$1" in
      -t|--theme) THEME=$2; shift 2;;
      --no-apply) NO_APPLY=$OK; shift 1;;
      --reload) RELOAD=$OK; shift 1;;
      --after) AFTER=$2; shift 2;;
      --help) HELP=$OK; shift 1;;
      --debug) DEBUG=$OK; shift 1;;
      --) shift; break;;
      -*|--*=) usage && _die "Unsupported flag $1";;
      *) shift;;
    esac
  done
}

main() {
  if [[ -v HELP ]]; then
    usage
    return 0
  fi

  if [[ -v THEME ]]; then
    ! does_the_theme_exist &&
      _die "This theme is not exist"
    parse_theme $THEME_PATH
    mkdir -p $CACHE_PATH
    build_all_templates

    if ! [ -v NO_APPLY ]; then
      apply_theme
      print_colorscheme
    fi
  fi

  if [ -v AFTER ]; then
    $AFTER
  fi
}

parse_arguments ${@}
main
