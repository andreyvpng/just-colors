#!/usr/bin/env bash

PATH_PREFIX=$HOME/.config/just-colors
CACHE_PATH=$PATH_PREFIX/cache
TEMPLATE_PATH=$PATH_PREFIX/templates
THEMES_PATH=$PATH_PREFIX/themes
THEME_EXT=yaml
VAR_PREFIX=TEMPLATE_VAR_

usage() {
  cat <<EOF
usage: just-colors [options]

  Options:
    --help
    --theme [name of theme]
    --no-apply
    --reload
    --after [path to script to run after]
EOF
}

print_log() {
  # Print colorize log
  #
  # $1          status
  #             ok|error|warning
  # $2          message
  #
  local status=$1
  local message=$2

  local RED="\e[38;5;1m"
  local GREEN="\e[38;5;2m"
  local YELLOW="\e[38;5;3m"
  local NORMAL="\e(B\e[m"

  case $status in
    ok)
      echo -e "[${GREEN}OK${NORMAL}] $message"
      ;;
    error)
      echo -e "[${RED}ERROR${NORMAL}] $message"
      ;;
    warning)
      echo -e "[${YELLOW}WARNING${NORMAL}] $message"
      ;;
  esac
}

_die() {
  print_log error "$1"

  exit 1
}

parse_theme() {
  # Parse the theme file
  #
  # $1            theme file
  #
  # The function searches for all matches by regular
  # expression that matches:
  # [start_of_line][some word containing a-zA-Z0-9]: [some word containing a-zA-Z0-9#][end of line]
  # alias,
  # [variable]: [value]
  #
  # Next, the values are assigned to the bash variables using eval
  # Security using eval is ensured by the following:
  #   1. data from the theme file is checked using regular expressions
  #      and cannot run extraneous code
  #   2. assigned variables using eval do not overlap with other
  #      script variables due to prefix($VAR_PREFIX)
  #
  local theme=$1
  local fields=$( \
    egrep -o "^([0-9a-zA-Z])\w+: \"([0-9a-zA-Z#])\w+\"$" $theme)

  local field_for_initialize=""
  for field in $fields; do
    if [[ $field_for_initialize == "" ]]; then
      field_for_initialize=$( \
        echo $field \
        | sed 's/://g')
      continue
    fi

    local value=$field
    eval ${VAR_PREFIX}${field_for_initialize}=${value}
    field_for_initialize=""
  done
}

get_value() {
  # Get the field value from the theme file
  #
  # $1        name_of_field
  #
  local name_of_variable=${VAR_PREFIX}${1}
  echo ${!name_of_variable}
}

parse_template() {
  # Get all matches from the
  # template file in the pattern.
  #
  # $1        template file
  #
  local template=$1
  local matches=$( \
    egrep -o "\{\{([0-9a-zA-Z-]){1,}\}\}" $template)
  matches=$( \
    echo $matches \
    | sed 's/[\{\}]//g')
  echo $matches
}

insert_into_template() {
  # Insert into template
  # In short, makes replacing the pattern with another string
  #
  # $1        pattern
  # $2        replacement string
  # $3        file path
  #
  local pattern=$1
  local replacement_string=$2
  local file_path=$3
  sed -i -e "s/{$pattern}/$replacement_string/g" $file_path
}

is_color() {
  # Is this color value?
  #
  # $1        variable
  #
  local variable=$1
  local variable_after_regex=$( \
    echo $variable \
    | egrep -o "([0-9A-Fa-f]{6})")

  [[ $variable == $variable_after_regex ]] && echo "1"
}

get_color_byte() {
  # $1            color
  # $2            color type
  #               r|g|b
  #
  local color=$1
  local color_type=$2

  case $color_type in
    r) echo $color | cut -c1-2;;
    g) echo $color | cut -c3-4;;
    b) echo $color | cut -c5-6;;
    *) echo $color;;
  esac
}

convert_16_to_10_base() {
  # $1          number in 16 base
  #
  local number=$1
  echo $(( 16#${number} ))
}

floating_point_division() {
  echo 0$(bc -l <<< "$1 / $2")
}

get_color_value() {
  # Echo value of color
  #
  # $1            color name
  # optional:
  # $2            defines the format
  #
  local color=$1
  local postfix=$2

  local format=$( \
    echo $postfix \
    | egrep -o '(hex|rgb|dec)')

  local mod=$( \
    echo $postfix \
    | egrep -o '\-[A-Za-z]{1,}$' \
    | sed 's/-//g')

  case $format in
    hex)
      case $mod in
        bgr)
          echo -n "$(get_color_byte $color b)"
          echo -n "$(get_color_byte $color g)"
          echo -n "$(get_color_byte $color r)"
          ;;
        "r"|"b"|"g"|"")
          echo "$(get_color_byte $color $mod)"
          ;;
      esac
      ;;
    rgb)
      case $mod in
        "r"|"b"|"g")
          echo "$(convert_16_to_10_base \
            $(get_color_byte $color $mod))"
          ;;
      esac
      ;;
    dec)
      case $mod in
        "r"|"b"|"g")
          echo "$(floating_point_division  \
            $(convert_16_to_10_base \
            $(get_color_byte $color $mod)) \
            255)"
        ;;
      esac
      ;;
  esac
}

build_template() {
  #
  # $1        path to template
  # $2        output file
  #

  template=$1
  output_file=$2

  cp "$template" "$output_file"

  for match in $(parse_template $template); do
    match_field=$(echo $match | egrep -o '^[^\-]*')
    match_mod=$(echo $match | sed s/$match_field-//g)

    value=$(get_value $match_field)

    [[ $(is_color $value) ]] &&
      [[ $match_mod != "" ]] &&
        value=$(get_color_value $value $match_mod)

    insert_into_template "{$match}" "$value" $output_file
  done
}

build_all_templates() {
  #
  # $1        theme name
  #
  THEME=$1
  parse_theme $THEMES_PATH/$THEME.$THEME_EXT

  mkdir -p $CACHE_PATH

  for template in $TEMPLATE_PATH/*; do
    build_template $template "$CACHE_PATH/$(basename $template)"
  done
}

apply_theme() {
  xrdb -merge -quiet $CACHE_PATH/colors.Xresources
  ($CACHE_PATH/tty.sh &)
  print_log ok "The theme applied"
}

parse_arguments() {
  while (( "$#" )); do
    case "$1" in
      -t|--theme)
        THEME=$2
        shift 2
        ;;
      --no-apply)
        NO_APPLY=1
        shift 1
        ;;
      --reload)
        RELOAD=0
        shift 1
        ;;
      --after)
        AFTER=$2
        shift 2
        ;;
      --help)
        HELP=0
        shift 1
        ;;
      --)
        shift
        break;;
      -*|--*=)
        usage && _die "Unsupported flag $1"
        ;;
      *)
        shift;;
    esac
  done
}

parse_arguments $@

if [ "${HELP}" ]; then
  usage
  exit 0
fi

if [ "${THEME}" ]; then
  [ -s "${THEMES_PATH}/${THEME}.${THEME_EXT}" ] ||
    _die "This theme is not exist"
  build_all_templates $THEME
  if [ -z "${NO_APPLY}" ]; then
    apply_theme
  fi
fi

if [ "${RELOAD}" ]; then
  apply_theme
fi

if [ "${AFTER}" ]; then
  $AFTER
fi
