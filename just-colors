#!/usr/bin/env bash

PATH_PREFIX=$HOME/.config/just-colors
CACHE_PATH=$PATH_PREFIX/cache
TEMPLATE_PATH=$PATH_PREFIX/templates
THEMES_PATH=$PATH_PREFIX/themes
THEME_EXT=yaml
VAR_PREFIX=TEMPLATE_VAR_
EXIT_ERROR=1
EXIT_OK=0

usage() {
  cat <<EOF
usage: just-colors [options]

  Options:
    --theme [name of theme]
    --no-apply
    --reload

EOF
   exit $EXIT_ERROR
}

print_log() {
  local status=$1
  local message=$2

  local RED="\e[38;5;1m"
  local GREEN="\e[38;5;2m"
  local NORMAL="\E(B\E[m"

  if [[ $status == "ok" ]]; then
    echo -e "[${GREEN}OK${NORMAL}] $message"
  elif [[ $status == "error" ]]; then
    echo -e "[${RED}ERROR${NORMAL}] $message"
  fi
}

parse_theme() {
  # Parse the theme file and
  # assigning bash values from the 
  # yaml file fields to variables,
  # respectively
  #
  # $1            theme file
  #
  local theme=$1
  local fields=$(egrep -o "^([0-9a-zA-Z])\w+: \"([0-9a-zA-Z#])\w+\"$" $theme)

  local field_for_initialize=""
  for field in $fields; do
    if [[ $field_for_initialize == "" ]]; then
      field_for_initialize=$(echo $field | sed 's/://g')
      continue
    fi

    local value=$field
    eval $VAR_PREFIX$field_for_initialize=$value
    field_for_initialize=""
  done 
}

get_value() {
  # Get the field value from 
  # the theme file
  #
  # $1        name_of_field
  #
  local name_of_variable=${VAR_PREFIX}${1}
  echo ${!name_of_variable}
}

parse_template() {
  # Get all matches from the
  # template file in the pattern.
  #
  # $1        template file
  #
  local template=$1
  local matches=$(egrep -o "\{\{([0-9a-zA-Z-]){1,}\}\}" $template)
  matches=$(echo $matches| sed 's/[\{\}]//g')
  echo $matches
}

insert_into_template() {
  # Insert into template
  #
  # $1        pattern
  # $2        replacement string
  # $3        file path
  #
  local pattern=$1
  local replacement_string=$2
  local file_path=$3
  sed -i -e "s/{$pattern}/$replacement_string/g" $file_path
}

is_color() {
  # Is this color value?
  #
  # $1        variable
  #
  local variable=$1
  local variable_after_regex=$(echo $variable | egrep -o "([0-9A-Fa-f]{6})")
  if [[ $variable == $variable_after_regex ]]; then
    echo "1"
  fi
}

get_color_byte() {
  # $1            color
  # $2            color type r|g|b
  #
  local color=$1
  local color_type=$2

  case $color_type in
    r)  echo $color | cut -c1-2;;
    g)  echo $color | cut -c3-4;;
    b)  echo $color | cut -c5-6;;
    *)  echo $color
  esac
}

convert_16_to_10_base() {
  # $1          number in 16 base
  #
  local number=$1
  echo "ibase=16; $number" | bc
}

floating_point_division() {
  echo 0$(bc -l <<< "$1 / $2")
}

get_color_value() {
  # Echo value of color
  #
  # $1            color name
  # optional:
  # $2            defines the format
  #
  local color_name=$1
  local postfix=$2

  local color=$(get_value $color_name)

  local format=$(echo $postfix | egrep -o '(hex|rgb|dec)')
  local mod=$(echo $postfix | egrep -o '\-[A-Za-z]{1,}$' | sed 's/-//g')

  case $format in
    "hex")
      if [[ $mod == "bgr" ]]; then
        echo "$(get_color_byte $color b)$(get_color_byte $color g)$(get_color_byte $color r)"
      else
        get_color_byte $color $mod
      fi;;
    "rgb")
      convert_16_to_10_base $(get_color_byte $color $mod);;
    "dec")
      floating_point_division  \
        $(convert_16_to_10_base $(get_color_byte $color $mod)) \
        255;;
  esac
}

apply_theme() {
  if [[ $DISPLAY != "" ]]; then
    xrdb -merge -quiet $CACHE_PATH/colors.Xresources
  fi
  ($CACHE_PATH/tty.sh &)
  print_log ok "The theme applied"
}


main() {
  while (( "$#" )); do
    case "$1" in
      -t|--theme)
        THEME=$2
        shift 2
        ;;
      --no-apply)
        NO_APPLY=1
        shift 1
        ;;
      --reload)
        RELOAD=0
        shift 1
        ;;
      --) # end argument parsing
        shift
        break;;
      -*|--*=) # unsupported flags
        print_log error "Unsupported flag $1" >&2
        exit $EXIT_ERROR;;
      *) # preserve positional arguments
        shift;;
    esac
  done

  if [ -z "${THEME}" ] && [ "${RELOAD}" ]; then
    apply_theme
    exit $EXIT_OK
  elif [ -z "${THEME}" ]; then
    usage
  elif ! [ -s "$THEMES_PATH/$THEME.$THEME_EXT" ]; then
    print_log error "This theme is not exist"
    exit $EXIT_ERROR
  fi

  parse_theme $THEMES_PATH/$THEME.$THEME_EXT

  for template in $TEMPLATE_PATH/*; do

    cp $template $CACHE_PATH/$(basename $template)

    for match in $(parse_template $template); do
      match_field=$(echo $match | egrep -o '^[^\-]*')
      match_mod=$(echo $match | sed s/$match_field-//g)

      value=$(get_value $match_field)
      if [[ $(is_color $math_field) ]] && [[ $match_mod != "" ]]; then
        value=$(get_color_value $match_field $match_mod)
      fi

      insert_into_template "{$match}" "$value" \
                           $CACHE_PATH/$(basename $template)
    done
  done


  if [ -z "${NO_APPLY}" ]; then
    apply_theme
  fi
}

main "$@"
